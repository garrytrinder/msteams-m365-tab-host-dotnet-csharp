@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager

@if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else
{
    <div class="welcome page">
        <div class="narrow page-padding">
            <img src="hello.png" />
            <h1 class="center">Congratulations@(!String.IsNullOrEmpty(userName) ? ", " + userName : "")!</h1>
            <p class="center">Your app is running in your @(GetEnvironmentName())</p>
            <p class="center">Your app is running in @(GetHostName())</p>
            @if (isInChannel)
            {
                <p class="center">Your app is running in a Teams channel.</p>
            }
            <FluentTabs style="width: 80%; justify-content: space-between; margin: 4rem auto;">
                <FluentTab style="font-size: 14px; min-height: 32px;">1. Build your app locally</FluentTab>
                <FluentTab>2. Provision and Deploy to the Cloud</FluentTab>
                <FluentTab>3. Publish to Teams</FluentTab>
                <FluentTabPanel>
                    <div style="display:block; width:100%;">
                        <EditCode />
                        @if (isInTeams)
                        {
                            <CurrentUser UserName="@userName" />
                        }
                        <Graph ErrorMessage="@errorMessage" />
                    </div>
                </FluentTabPanel>
                <FluentTabPanel>
                    <Deploy />
                </FluentTabPanel>
                <FluentTabPanel>
                    <Publish />
                </FluentTabPanel>
            </FluentTabs>
        </div>
    </div>
}

@code {
    string userName;
    string errorMessage;
    bool isInTeams;
    bool isInOutlook;
    bool isInMicrosoft365;
    bool isInChannel;
    bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await MicrosoftTeams.InitializeAsync();
        var context = await MicrosoftTeams.GetContextAsync();

        if (firstRender)
        {
            isInTeams = context.App.Host.Name == HostName.Teams;
            isInOutlook = context.App.Host.Name == HostName.Outlook;
            isInMicrosoft365 = context.App.Host.Name == HostName.Office;

            if (isInTeams)
            {
                isInChannel = context.Channel != null;

                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
            }

            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }

    private string GetHostName()
    {
        if (isInTeams)
        {
            return "Teams";
        }
        if (isInOutlook)
        {
            return "Outlook";
        }
        if (isInMicrosoft365)
        {
            return "Microsoft 365";
        }
        return "unknown host";
    }
}